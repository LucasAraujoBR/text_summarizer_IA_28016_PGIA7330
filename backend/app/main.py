from fastapi import FastAPI
from app.api.routes import router as api_router
from app.utils.logger import setup_logger
from app.core.config import settings
from app.db.init_db import init_db
import asyncio

# Configura o logger
setup_logger()

# Cria a aplica√ß√£o FastAPI com configura√ß√µes din√¢micas
app = FastAPI(
    title=settings.app_name,
    description="""
    # API de Gera√ß√£o Autom√°tica de Resumos Did√°ticos

    ## üìù Descri√ß√£o
    API desenvolvida para gerar resumos autom√°ticos de textos did√°ticos utilizando o modelo Gemini via Langchain.
    Focada em apoiar estudantes com dificuldades de leitura ou necessidades especiais.

    ## üöÄ Funcionalidades
    - Gera√ß√£o autom√°tica de resumos did√°ticos
    - Valida√ß√£o de entrada e sa√≠da
    - Suporte a m√∫ltiplos formatos de texto
    - Personaliza√ß√£o de par√¢metros de resumo

    ## üîß Tecnologias
    - FastAPI
    - Langchain
    - Gemini API
    - PostgreSQL (opcional)

    ## üìö Endpoints

    ### POST /analise
    Gera um resumo autom√°tico do texto did√°tico fornecido.

    **Par√¢metros:**
    - `text`: Texto did√°tico a ser resumido
    - `options`: Configura√ß√µes opcionais do resumo
        - `max_length`: Tamanho m√°ximo do resumo
        - `language`: Idioma do resumo (padr√£o: pt-BR)

    **Resposta:**
    ```json
    {
        "summary": "Resumo gerado",
        "metadata": {
            "original_length": 1000,
            "summary_length": 300,
            "processing_time": 2.5
        }
    }
    ```

    ## üìä M√©tricas
    - Tempo de processamento
    - Tamanho do texto original e resumo
    - Taxa de compress√£o

    ## ‚ö†Ô∏è Limita√ß√µes
    - Tamanho m√°ximo do texto: 10.000 caracteres
    - Limite de requisi√ß√µes: 100/min
    - Suporte a idiomas: pt-BR, en-US

    ## üîÑ Vers√£o
    Vers√£o atual: 0.1.0
    """,
    version="0.1.0",
    debug=settings.debug,
    docs_url="/docs",
    redoc_url="/redoc",
    openapi_url="/openapi.json",
    openapi_tags=[
        {
            "name": "resumos",
            "description": "Opera√ß√µes relacionadas √† gera√ß√£o de resumos did√°ticos",
        },
        {
            "name": "valida√ß√£o",
            "description": "Endpoints para valida√ß√£o de textos e resumos",
        },
        {
            "name": "m√©tricas",
            "description": "Endpoints para consulta de m√©tricas e estat√≠sticas",
        }
    ],
    contact={
        "name": "Lucas Ara√∫jo",
        "email": "lucas.edson@ufrpe.br",
        "url": "https://github.com/LucasAraujoBR"
    },
    license_info={
        "name": "MIT",
        "url": "https://opensource.org/licenses/MIT"
    }
)

@app.on_event("startup")
async def startup_event():
    """Inicializa o banco de dados na inicializa√ß√£o da aplica√ß√£o."""
    try:
        await init_db()
        print("‚úÖ Banco de dados inicializado com sucesso!")
    except Exception as e:
        print(f"‚ö†Ô∏è Erro ao inicializar banco de dados: {e}")

# Inclui rotas
app.include_router(api_router)
